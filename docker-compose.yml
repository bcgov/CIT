version: "3.3"

services:
  cit-user-tracking:
    build:
      context: ./cit-api
      dockerfile: Dockerfile.usertracking
    image: countable/cit
    env_file:
      - cit-api/.env
    ports:
      - 8000:8000
  cit-web:
    container_name: cit-web
    build: ./cit3.0-web
    env_file:
      - cit3.0-web/.env
    restart: always
    ports:
      - "80:80"
  cit-api:
    build:
      context: ./cit-api
      dockerfile: Dockerfile.dev
    image: countable/cit
    volumes:
      - ./cit-api:/code
      - static:/static
      - media:/media
    env_file:
      - cit-api/.env
    ports:
      - 8000:8000
    depends_on:
      - db
  db:
    image: mdillon/postgis
    env_file:
      - .env
    volumes:
      - pg-data:/var/lib/postgresql/data
      - ./db:/code
    ports:
      - 5432:5432
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    # so where did this realm-export come from? Long store worth documenting for future Chris:
    # ** This important part of this export is getting the user account.  Otherwise there's a simpler way of just getting the realm export through the GUI.
    # - standup a bare keycloak from he docker image
    # - config the keycloak with the desired realm, client, and bobross user account.
    # - stand up a second instance to export the first instance config file and store in the /tmp folder on the first KC instance. Do so wih this command:
    # -     docker exec -it cit_keycloak_1 /opt/jboss/keycloak/bin/standalone.sh -Djboss.socket.binding.port-offset=100 -Dkeycloak.migration.action=export -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.realmName=fyof530u -Dkeycloak.migration.usersExportStrategy=SAME_FILE -Dkeycloak.migration.file=/tmp/export.json
    # - then to get the file just: docker cp cit_keycloak_1:/tmp/export.json ./realm-export.json
    volumes:
      - ./realm-export.json:/tmp/realm-export.json
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: Pa55w0rd
      KEYCLOAK_IMPORT: /tmp/realm-export.json -Dkeycloak.profile.feature.upload_scripts=enabled
    ports:
      - 8080:8080


volumes:
  pg-data:
    driver: local
  static:
    driver: local
  media:
    driver: local
