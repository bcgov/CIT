kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    deployment.kubernetes.io/revision: '8'
    image.openshift.io/triggers: |-
      [
        {
          "from": {
            "kind": "ImageStreamTag",
            "namespace": "{{ .Values.license_plate }}-tools",
            "name": "{{ .Values.app_name }}-webapi:{{ .Values.image_stream_tag }}"
          },
          "fieldPath": "spec.template.spec.containers[0].image"
        }
      ]
  name: {{ .Values.app_name }}-api
  namespace: {{ .Values.license_plate }}-{{ .Values.namespace_env }}
  labels:
    app: {{ .Values.app_name }}-api
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.app_name }}-api
  template:
    metadata:
      labels:
        app: {{ .Values.app_name }}-api
    spec:
      containers:
        - name: {{ .Values.app_name }}-api
          image: {{ .Values.dockerhost }}/{{ .Values.license_plate }}-tools/{{ .Values.app_name }}-webapi:{{ .Values.image_stream_tag }}
          resources:
            limits:
              cpu: {{ .Values.limits_cpu }}
              memory: {{ .Values.limits_memory }}
            requests:
              cpu: {{ .Values.requests_cpu}}
              memory: {{ .Values.requests_memory }}
          terminationMessagePath: /dev/termination-log
          envFrom:
            - secretRef:
                name: {{ .Values.app_name }}-api-config
          imagePullPolicy: Always
          terminationMessagePolicy: File
          volumeMounts:
            - name: media
              mountPath: /media
      restartPolicy: Always
      serviceAccount: default
      volumes:
        - name: media
          emptyDir: {}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 5
  progressDeadlineSeconds: 600
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    deployment.kubernetes.io/revision: '8'
    image.openshift.io/triggers: |-
      [
        {
          "from": {
            "kind": "ImageStreamTag",
            "namespace": "{{ .Values.license_plate }}-tools",
            "name": "{{ .Values.app_name }}-frontend:{{ .Values.image_stream_tag }}"
          },
          "fieldPath": "spec.template.spec.containers[0].image"
        }
      ]
  name: {{ .Values.app_name }}-web
  namespace: {{ .Values.license_plate }}-{{ .Values.namespace_env }}
  labels:
    app: {{ .Values.app_name }}-web
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.app_name }}-web
  template:
    metadata:
      labels:
        app: {{ .Values.app_name }}-web
    spec:
      containers:
        - name: {{ .Values.app_name }}-web
          image: {{ .Values.dockerhost }}/{{ .Values.license_plate }}-tools/{{ .Values.app_name }}-frontend:{{ .Values.image_stream_tag }}
          resources:
            limits:
              cpu: {{ .Values.limits_cpu }}
              memory: {{ .Values.limits_memory }}
            requests:
              cpu: {{ .Values.requests_cpu}}
              memory: {{ .Values.requests_memory }}
          terminationMessagePath: /dev/termination-log
          envFrom:
            - secretRef:
                name: {{ .Values.app_name }}-web-config
          imagePullPolicy: Always
          terminationMessagePolicy: File
          #volumeMounts:
          #  - name: {{ .Values.app_name }}-nginx-cache
          #    mountPath: /var/cache/nginx
      restartPolicy: Always
      serviceAccount: default
      #volumes:
      #  - name: {{ .Values.app_name }}-nginx-cache
      #    emptyDir: {}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 5
  progressDeadlineSeconds: 600
